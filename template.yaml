AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  serverless-security-demo

  Sample SAM Template for serverless-security-demo

# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst

Metadata:
  AWS::ServerlessRepo::Application:
    Name: serverless-security-demo
    Description: Simple serverless application to demonstrate security concepts
    Author: Samuel Waymouth
    SpdxLicenseId: Apache-2.0
    LicenseUrl: LICENSE.txt
    ReadmeUrl: README.md
    Labels: ['tests']
    HomePageUrl: https://github.com/waymousa/srv-sec-demo-samcli
    SemanticVersion: 0.0.1
    SourceCodeUrl: https://github.com/waymousa/srv-sec-demo-samcli

Globals:
  Function:
    Timeout: 3

Resources:
  SecureApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      Cors:
        AllowMethods: "'OPTIONS, GET, POST'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
      Auth:
        DefaultAuthorizer: SrvSecDemoCognitoAuthorizer
        Authorizers:
          SrvSecDemoCognitoAuthorizer:
            UserPoolArn: !GetAtt SrvSecDemoCognitoUserPool.Arn
        AddDefaultAuthorizerToCorsPreflight: False

  SrvSecDemoCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: SrvSecDemoCognitoUserPool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - AttributeDataType: String
          Name: email
          Required: false
  
  SrvSecDemoCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref SrvSecDemoCognitoUserPool
      ClientName: SrvSecDemoCognitoUserPoolClient
      GenerateSecret: false

  UserPoolUser:
     Type: AWS::Cognito::UserPoolUser
     Properties:
       DesiredDeliveryMediums:
         - EMAIL
       Username: swaym@amazon.co.uk
       UserPoolId: !Ref SrvSecDemoCognitoUserPool

  ReadFromDynamoDBFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: security_serverless_demo/
      Handler: rddb.lambda_handler
      Runtime: python3.8
      Events:
        Root:
          Type: Api
          Properties:
            RestApiId: !Ref SecureApi
            Path: /rddb
            Method: get
      Environment:
        Variables:
          loglevel: INFO
          table: !Ref TableOfStuff
      Policies:
        - DynamoDBReadPolicy:
            TableName: !Ref TableOfStuff

  TableOfStuff:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema: 
          - 
            AttributeName: "sub"
            KeyType: "HASH"
          -
            AttributeName: "balance"
            KeyType: "RANGE"
      AttributeDefinitions: 
          - 
            AttributeName: "sub"
            AttributeType: "S"
          - 
            AttributeName: "balance"
            AttributeType: "S"
      ProvisionedThroughput: 
        ReadCapacityUnits: "5"
        WriteCapacityUnits: "5"

  Securitylayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      ContentUri: ./security_layer
      CompatibleRuntimes:
        - python3.8
    Metadata:
      BuildMethod: python3.8

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  ReadFromDynamoDBFunctionApi:
    Description: "API Gateway endpoint URL for Dev stage for Read from Dynamodb function"
    Value: !Sub "https://${SecureApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/rddb"
AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'serverless-security-demo

  Sample SAM Template for serverless-security-demo

  '
Metadata:
  AWS::ServerlessRepo::Application:
    Name: securecabbage-auth-poc
    Description: Simple balance checker and authentication flow poc
    Author: Samuel Waymouth
    SpdxLicenseId: Apache-2.0
    LicenseUrl: s3://811298697199-sam-package/f2f4f1c7718eafbf1d0f861ba6331168
    ReadmeUrl: s3://811298697199-sam-package/9d3b814ffb2f0656809c5131a57f8e6b
    Labels:
    - tests
    HomePageUrl: https://github.com/waymousa/cognito_pkce_app
    SemanticVersion: '0.0.1'
    SourceCodeUrl: https://github.com/waymousa/cognito_pkce_app
Globals:
  Function:
    Timeout: 3
Resources:
  SecureApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Dev
      Cors:
        AllowMethods: '''OPTIONS, GET, POST'''
        AllowHeaders: '''Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'''
        AllowOrigin: '''*'''
      Auth:
        DefaultAuthorizer: SrvSecDemoCognitoAuthorizer
        Authorizers:
          SrvSecDemoCognitoAuthorizer:
            UserPoolArn:
              Fn::GetAtt:
              - SrvSecDemoCognitoUserPool
              - Arn
        AddDefaultAuthorizerToCorsPreflight: false
  SrvSecDemoCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: SrvSecDemoCognitoUserPool
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: false
      Policies:
        PasswordPolicy:
          MinimumLength: 8
      UsernameAttributes:
      - email
      AutoVerifiedAttributes:
      - email
      Schema:
      - AttributeDataType: String
        Name: email
        Required: false
  SrvSecDemoCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId:
        Ref: SrvSecDemoCognitoUserPool
      ClientName: SrvSecDemoCognitoUserPoolClient
      GenerateSecret: false
  UserPoolUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      DesiredDeliveryMediums:
      - EMAIL
      Username: Bob
      UserAttributes:
      - name: email
        value: swaym@amazon.com
      - name: phone_number
        value: '00447464491594'
      UserPoolId:
        Ref: SrvSecDemoCognitoUserPool
  ReadFromDynamoDBFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: s3://811298697199-sam-package/43d0027426e4f0a6a9068a77435530d6
      Handler: rddb.lambda_handler
      Runtime: python3.8
      Events:
        Root:
          Type: Api
          Properties:
            RestApiId:
              Ref: SecureApi
            Path: /rddb
            Method: get
      Environment:
        Variables:
          loglevel: INFO
          table:
            Ref: TableOfStuff
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: TableOfStuff
  TableOfStuff:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
      - AttributeName: sub
        KeyType: HASH
      - AttributeName: balance
        KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: sub
        AttributeType: S
      - AttributeName: balance
        AttributeType: S
      ProvisionedThroughput:
        ReadCapacityUnits: '5'
        WriteCapacityUnits: '5'
Outputs:
  ReadFromDynamoDBFunctionApi:
    Description: API Gateway endpoint URL for Dev stage for Read from Dynamodb function
    Value:
      Fn::Sub: https://${SecureApi}.execute-api.${AWS::Region}.amazonaws.com/Dev/rddb
